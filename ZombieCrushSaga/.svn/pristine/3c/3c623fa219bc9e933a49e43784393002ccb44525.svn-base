package ZombieCrushSaga.events;

import ZombieCrushSaga.ZombieCrushSaga;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import ZombieCrushSaga.data.ZombieCrushSagaDataModel;
import ZombieCrushSaga.file.ZombieCrushSagaFileManager;
import ZombieCrushSaga.ui.ZombieCrushSagaMiniGame;
import static ZombieCrushSaga.ZombieCrushSagaConstants.*;
import properties_manager.PropertiesManager;

/**
 * This event handler responds to when the user selects
 * a Mahjong level to play on the splash screen.
 * 
 * @author Richard McKenna
 */
public class SelectLevelHandler implements ActionListener
{
    // HERE'S THE GAME WE'LL UPDATE
    private ZombieCrushSagaMiniGame game;
    
    // HERE'S THE LEVEL TO LOAD
    private String levelFile;
    
    /**
     * This constructor just stores the game and the level to
     * load for later.
     *     
     * @param initGame The game to update.
     * 
     * @param initLevelFile The level to load when the user requests it. 
     */
    public SelectLevelHandler(  ZombieCrushSagaMiniGame initGame ,String level
                                )
    {
        game = initGame;
        levelFile=level;
    }
    
    /**
     * Here is the event response. This code is executed when
     * the user clicks on a button for selecting a level
     * which is how the user starts a game. Note that the game 
     * data is already locked for this thread before it is called, 
     * and that it will be unlocked after it returns.
     * 
     * @param ae the event object for the button press
     */
    @Override
    public void actionPerformed(ActionEvent ae)
    {
        // WE ONLY LET THIS HAPPEN IF THE SPLASH SCREEN IS VISIBLE
       
            // GET THE GAME'S DATA MODEL, WHICH IS ALREADY LOCKED FOR US
         ZombieCrushSagaDataModel data = (ZombieCrushSagaDataModel)game.getDataModel();
         data.setCurrentLevel(levelFile);
         data.setData(0, 0);
            // UPDATE THE DATA
         ZombieCrushSagaFileManager fileManager = game.getFileManager();
         fileManager.loadLevel(levelFile);
         
          game.switchToLevelScoreScreen();
            
            // GO TO THE GAME
           // game.switchToGameScreen();
        
    }
}